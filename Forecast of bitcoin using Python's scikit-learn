{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/matthewcjohnson/anaconda3/lib/python3.6/site-packages/IPython/core/magics/pylab.py:160: UserWarning: pylab import has clobbered these variables: ['clf']\n",
      "`%matplotlib` prevents importing * from pylab and numpy\n",
      "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
     ]
    }
   ],
   "source": [
    "# Machine Learning classification\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import scorer\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# To scale the data\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# For data manipulation\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# To plot\n",
    "import matplotlib.pyplot as plt\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Market Cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-04-28</td>\n",
       "      <td>135.30</td>\n",
       "      <td>135.98</td>\n",
       "      <td>132.10</td>\n",
       "      <td>134.21</td>\n",
       "      <td>-</td>\n",
       "      <td>1,500,520,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-04-29</td>\n",
       "      <td>134.44</td>\n",
       "      <td>147.49</td>\n",
       "      <td>134.00</td>\n",
       "      <td>144.54</td>\n",
       "      <td>-</td>\n",
       "      <td>1,491,160,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-04-30</td>\n",
       "      <td>144.00</td>\n",
       "      <td>146.93</td>\n",
       "      <td>134.05</td>\n",
       "      <td>139.00</td>\n",
       "      <td>-</td>\n",
       "      <td>1,597,780,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-05-01</td>\n",
       "      <td>139.00</td>\n",
       "      <td>139.89</td>\n",
       "      <td>107.72</td>\n",
       "      <td>116.99</td>\n",
       "      <td>-</td>\n",
       "      <td>1,542,820,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-02</td>\n",
       "      <td>116.38</td>\n",
       "      <td>125.60</td>\n",
       "      <td>92.28</td>\n",
       "      <td>105.21</td>\n",
       "      <td>-</td>\n",
       "      <td>1,292,190,000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date    Open    High     Low   Close Volume     Market Cap\n",
       "0 2013-04-28  135.30  135.98  132.10  134.21      -  1,500,520,000\n",
       "1 2013-04-29  134.44  147.49  134.00  144.54      -  1,491,160,000\n",
       "2 2013-04-30  144.00  146.93  134.05  139.00      -  1,597,780,000\n",
       "3 2013-05-01  139.00  139.89  107.72  116.99      -  1,542,820,000\n",
       "4 2013-05-02  116.38  125.60   92.28  105.21      -  1,292,190,000"
      ]
     },
     "execution_count": 1141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in data for \"bitcoin_price\" dataset\n",
    "bitcoin_price = pd.read_csv('bitcoin_price.csv',parse_dates=['Date'])\n",
    "\n",
    "# Sort the dates into proper order\n",
    "bitcoin_price = bitcoin_price[::-1]\n",
    "\n",
    "# Reset index for bitcoin_price\n",
    "bitcoin_price.index = range(len(bitcoin_price))\n",
    "\n",
    "bitcoin_price.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>btc_market_price</th>\n",
       "      <th>btc_total_bitcoins</th>\n",
       "      <th>btc_market_cap</th>\n",
       "      <th>btc_trade_volume</th>\n",
       "      <th>btc_blocks_size</th>\n",
       "      <th>btc_avg_block_size</th>\n",
       "      <th>btc_n_orphaned_blocks</th>\n",
       "      <th>btc_n_transactions_per_block</th>\n",
       "      <th>btc_median_confirmation_time</th>\n",
       "      <th>...</th>\n",
       "      <th>btc_cost_per_transaction_percent</th>\n",
       "      <th>btc_cost_per_transaction</th>\n",
       "      <th>btc_n_unique_addresses</th>\n",
       "      <th>btc_n_transactions</th>\n",
       "      <th>btc_n_transactions_total</th>\n",
       "      <th>btc_n_transactions_excluding_popular</th>\n",
       "      <th>btc_n_transactions_excluding_chains_longer_than_100</th>\n",
       "      <th>btc_output_volume</th>\n",
       "      <th>btc_estimated_transaction_volume</th>\n",
       "      <th>btc_estimated_transaction_volume_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2009-11-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1339450.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71</td>\n",
       "      <td>71</td>\n",
       "      <td>26958</td>\n",
       "      <td>71</td>\n",
       "      <td>71</td>\n",
       "      <td>3550.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2009-11-11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1342900.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000323</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.166667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71</td>\n",
       "      <td>78</td>\n",
       "      <td>27036</td>\n",
       "      <td>78</td>\n",
       "      <td>78</td>\n",
       "      <td>93450.0</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2009-11-12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1346400.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>27106</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2009-11-13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1349900.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>673.076923</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73</td>\n",
       "      <td>73</td>\n",
       "      <td>27179</td>\n",
       "      <td>73</td>\n",
       "      <td>73</td>\n",
       "      <td>4100.0</td>\n",
       "      <td>520.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2009-11-14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1354050.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000216</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>27262</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>4150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date  btc_market_price  btc_total_bitcoins  btc_market_cap  \\\n",
       "0 2009-11-10               0.0           1339450.0             0.0   \n",
       "1 2009-11-11               0.0           1342900.0             0.0   \n",
       "2 2009-11-12               0.0           1346400.0             0.0   \n",
       "3 2009-11-13               0.0           1349900.0             0.0   \n",
       "4 2009-11-14               0.0           1354050.0             0.0   \n",
       "\n",
       "   btc_trade_volume  btc_blocks_size  btc_avg_block_size  \\\n",
       "0               0.0              0.0            0.000215   \n",
       "1               0.0              0.0            0.000323   \n",
       "2               0.0              0.0            0.000215   \n",
       "3               0.0              0.0            0.000242   \n",
       "4               0.0              0.0            0.000216   \n",
       "\n",
       "   btc_n_orphaned_blocks  btc_n_transactions_per_block  \\\n",
       "0                      0                           1.0   \n",
       "1                      0                           1.0   \n",
       "2                      0                           1.0   \n",
       "3                      0                           1.0   \n",
       "4                      0                           1.0   \n",
       "\n",
       "   btc_median_confirmation_time                  ...                   \\\n",
       "0                           0.0                  ...                    \n",
       "1                           0.0                  ...                    \n",
       "2                           0.0                  ...                    \n",
       "3                           0.0                  ...                    \n",
       "4                           0.0                  ...                    \n",
       "\n",
       "   btc_cost_per_transaction_percent  btc_cost_per_transaction  \\\n",
       "0                          0.000000                       0.0   \n",
       "1                         19.166667                       0.0   \n",
       "2                          0.000000                       0.0   \n",
       "3                        673.076923                       0.0   \n",
       "4                          0.000000                       0.0   \n",
       "\n",
       "   btc_n_unique_addresses  btc_n_transactions  btc_n_transactions_total  \\\n",
       "0                      71                  71                     26958   \n",
       "1                      71                  78                     27036   \n",
       "2                      70                  70                     27106   \n",
       "3                      73                  73                     27179   \n",
       "4                      83                  83                     27262   \n",
       "\n",
       "   btc_n_transactions_excluding_popular  \\\n",
       "0                                    71   \n",
       "1                                    78   \n",
       "2                                    70   \n",
       "3                                    73   \n",
       "4                                    83   \n",
       "\n",
       "   btc_n_transactions_excluding_chains_longer_than_100  btc_output_volume  \\\n",
       "0                                                 71               3550.0   \n",
       "1                                                 78              93450.0   \n",
       "2                                                 70               3500.0   \n",
       "3                                                 73               4100.0   \n",
       "4                                                 83               4150.0   \n",
       "\n",
       "   btc_estimated_transaction_volume  btc_estimated_transaction_volume_usd  \n",
       "0                               0.0                                   0.0  \n",
       "1                           18000.0                                   0.0  \n",
       "2                               0.0                                   0.0  \n",
       "3                             520.0                                   0.0  \n",
       "4                               0.0                                   0.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 1142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in data for \"bitcoin_price\" dataset\n",
    "bitcoin_dataset = pd.read_csv('bitcoin_dataset.csv',parse_dates=['Date'])\n",
    "bitcoin_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Open</th>\n",
       "      <th>btc_estimated_transaction_volume_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-04-28</td>\n",
       "      <td>134.21</td>\n",
       "      <td>135.30</td>\n",
       "      <td>22605050.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-04-29</td>\n",
       "      <td>144.54</td>\n",
       "      <td>134.44</td>\n",
       "      <td>41199388.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-04-30</td>\n",
       "      <td>139.00</td>\n",
       "      <td>144.00</td>\n",
       "      <td>32294820.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-05-01</td>\n",
       "      <td>116.99</td>\n",
       "      <td>139.00</td>\n",
       "      <td>32988744.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-02</td>\n",
       "      <td>105.21</td>\n",
       "      <td>116.38</td>\n",
       "      <td>33019004.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date   Close    Open  btc_estimated_transaction_volume_usd\n",
       "0 2013-04-28  134.21  135.30                            22605050.0\n",
       "1 2013-04-29  144.54  134.44                            41199388.0\n",
       "2 2013-04-30  139.00  144.00                            32294820.0\n",
       "3 2013-05-01  116.99  139.00                            32988744.0\n",
       "4 2013-05-02  105.21  116.38                            33019004.0"
      ]
     },
     "execution_count": 1143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make bitcoin_price and bitcoin_dataset the same length\n",
    "equal_length = len(bitcoin_dataset) - len(bitcoin_price)\n",
    "bitcoin_dataset = bitcoin_dataset[['btc_estimated_transaction_volume_usd']][equal_length:]\n",
    "\n",
    "# Reset index for bitcoin_dataset\n",
    "bitcoin_dataset.index = range(len(bitcoin_dataset))\n",
    "\n",
    "# Unable to change bitcoin_price 'Volume' and 'Market Cap' from type string to float64, so will drop columns\n",
    "bitcoin_price = bitcoin_price[['Date','Close','Open']]\n",
    "\n",
    "# Merge bitcoin_price and bitcoin_dataset\n",
    "df = pd.merge(bitcoin_price,bitcoin_dataset, left_index = True, right_index = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Price in USD')"
      ]
     },
     "execution_count": 1144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a27a9ff28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot bitcoin's closing price \n",
    "df_close = df[['Date','Close']]\n",
    "df_close = df_close.set_index('Date')\n",
    "\n",
    "bitcoin_plot = df_close.plot()\n",
    "bitcoin_plot.set_xlabel('Date')\n",
    "bitcoin_plot.set_ylabel('Price in USD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1145,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('Date', 1)\n",
    "\n",
    "# Convert df to an array\n",
    "df = df.values\n",
    "\n",
    "# Training and test data\n",
    "train_start = 0\n",
    "train_end = int(np.floor(0.8*m))\n",
    "test_start = train_end + 1\n",
    "test_end = m\n",
    "data_train = df[np.arange(train_start, train_end), :]\n",
    "data_test = df[np.arange(test_start, test_end), :]\n",
    "\n",
    "# Prepare data for Machine Learning by scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(data_train)\n",
    "data_train = scaler.transform(data_train)\n",
    "data_test = scaler.transform(data_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1146,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Build X and y\n",
    "X = df[:,1:]\n",
    "y = df[:,0]\n",
    "\n",
    "# Build X and y train/test sets\n",
    "X_train = data_train[:, 1:]\n",
    "y_train = data_train[:, 0]\n",
    "X_test = data_test[:, 1:]\n",
    "y_test = data_test[:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE training 0.19651473186\n",
      "MSE testing 0.19651473186\n"
     ]
    }
   ],
   "source": [
    "clf = MLPRegressor(activation='identity',solver='lbfgs')\n",
    "clf.fit(X,y)\n",
    "\n",
    "train_mse = clf.predict(X_train)\n",
    "test_mse = clf.predict(X_test)\n",
    "\n",
    "train_pred = clf.predict(X_train)\n",
    "test_pred = clf.predict(X_test)\n",
    "\n",
    "print ('MSE training', mean_squared_error(train_mse,y_train))\n",
    "print ('MSE testing', mean_squared_error(train_mse,y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1148,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "non-broadcastable output operand with shape (990,1) doesn't match the broadcast shape (990,3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1148-29beab076b08>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'testing result'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'prediction target'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox_to_anchor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.05\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mborderaxespad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'testing result with real number'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/sklearn/preprocessing/data.py\u001b[0m in \u001b[0;36minverse_transform\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: non-broadcastable output operand with shape (990,1) doesn't match the broadcast shape (990,3)"
     ]
    }
   ],
   "source": [
    "plt.plot(scaler.inverse_transform(data_test.reshape(-1,1)),label='testing result')\n",
    "plt.plot(scaler.inverse_transform(y_test.reshape(-1,1)),color='red', label='prediction target')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "plt.title('testing result with real number')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
